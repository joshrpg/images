daemon off;
pid /home/container/tmp/nginx.pid;
worker_processes auto;

error_log stderr info;

load_module /usr/lib/nginx/modules/ngx_rtmp_module.so;

events {
	worker_connections 768;
}

http {
  # Pterodactyl is apparently is a little touchy on this so we have to "hardcode"
  client_body_temp_path /home/container/tmp/client_temp;
  proxy_temp_path       /home/container/tmp/proxy_temp_path;
  fastcgi_temp_path     /home/container/tmp/fastcgi_temp;
  uwsgi_temp_path       /home/container/tmp/uwsgi_temp;
  scgi_temp_path        /home/container/tmp/scgi_temp;

  error_log /dev/null;
  access_log /dev/null;

  server {
    
    listen ${SERVER_PORT};
    
    location /hls {
      # Serve HLS fragments
      types {
          application/vnd.apple.mpegurl m3u8;
          video/mp2t ts;
      }
      root /home/container/web;
      add_header Cache-Control no-cache;
    }
  }
}

rtmp {
  server {
    listen ${RTMP_PORT}; # this is the port, you may change it if necessary.

    chunk_size 4000; # a basic chunk_size for RTMP's uses.
    
    application live { # "live" may be changed to whatever you'd like, this will affect the URLs we use later, though.
      live on;

      # Uncommenting this will allow anyone and everyone to use the rtmp service.
      # I would only use this for troubleshooting or if you have another way of resitricting access
      # allow publish all;

      # Change/Add IPs that will be publishing their rtmp feeds too this app.
      allow publish 127.0.0.1; 
      deny publish all;
      
      hls on;
      hls_path /home/container/web;
      
      # Thies 2 lines should help with latency
      hls_playlist_length 4s;
      
      # The hls_fragment should match your keyframe interval in obs see screenshot in readme
      hls_fragment 1s;
      
      # Uncommenting will fix a minor issue if the stream ends prematurely.
      # However... this does have a side effect of using more disk space.
      # hls_continuous on;
    }
  }
}